services:
  redis:
    image: redis:7.4.1
    container_name: bt_nms_redis0
    command:
      - redis-server
      - --appendonly no
      - --databases 3
      - --maxmemory 100mb
      - --maxclients 500
      - --maxmemory-policy allkeys-lru
      - --save ""
      - --tcp-backlog 256
    networks:
      - bt_nms_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  #udp_agent: # 生产环境中，不在docker中运行，直接运行在外部操作系统中，这段需要删除。
  #  build:
  #    context: ./udp_agent
  #    dockerfile: Dockerfile-udp  # 为 udp_agent.py 创建的 Dockerfile
  #  image: udp_agent:latest #本地开发可以不用image
  #  container_name: bt_nms_udp_agent0
  #  depends_on:
  #      - redis
  #  #ports:
  #  #    - "38315:38315/udp"  # 映射容器的 UDP 端口到主机
  #  network_mode: host  # 使用 host 网络模式
  #  #networks:
  #  #    - bt_nms_network
  #  restart: unless-stopped

  vue:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod #生产环境版本
      args:
        VITE_BACKEND_PORT: 8000
    image: my_vue:prod
    container_name: bt_nms_vue_prod0
    ports:
      - "38173:80"  # 映射 Nginx 服务端口
    networks:
      - bt_nms_network
    depends_on:
      - web
    restart: unless-stopped

  web:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    image: my_django:v5.0.6
    container_name: bt_nms_django_app0
    # 生产环境中makemigrations指令可删去
    command: ["/app/entrypoint.sh"] #entrypoint-prod.sh文件在Dockerfile中复制时重命名为entrypoint.sh
    volumes:
      - ./backend:/app  # 确保路径正确
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=myproject.settings
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_NAME=mydatabase
      - DATABASE_USER=myuser
      - DATABASE_PASSWORD=mypassword
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DJANGO_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_EMAIL=admin@example.com
      - DJANGO_SUPERUSER_PASSWORD=admin
    depends_on:
      - redis
      - db
    networks:
      - bt_nms_network
      - kafka_kafka-net
    restart: unless-stopped

  udp_receiver:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    image: my_django:v5.0.6  # 保持与 web 相同的镜像
    container_name: bt_nms_udp_receiver0
    command: python udp_receiver.py
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=myproject.settings
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_GROUP_ID=udp-receiver-0
    depends_on:
      - web
    volumes:
      - ./backend:/app
    networks:
      - bt_nms_network
      - kafka_kafka-net
    restart: unless-stopped

  summarize_alarms_container:
    build:  # 复用 web 服务的构建配置
      context: ./backend
      dockerfile: Dockerfile.prod
    image: my_django:v5.0.6  # 保持与 web 相同的镜像
    container_name: bt_nms_summarize_alarms_container0
    command: python summarize_alarms_container.py
    volumes:
      - ./backend:/app  # 动态挂载代码（与 web 服务路径一致）
    working_dir: /app
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=myproject.settings
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - web
    networks:
      - bt_nms_network
    restart: unless-stopped

  celery:
    build:  # 复用 web 服务的构建配置
      context: ./backend
      dockerfile: Dockerfile.prod
    image: my_django:v5.0.6  # 保持与 web 相同的镜像
    container_name: bt_nms_celery_worker0
    command: celery -A myproject worker --loglevel=info
    volumes:
      - ./backend:/app  # 动态挂载代码（与 web 服务路径一致）
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=myproject.settings
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - redis
      - db
    networks:
      - bt_nms_network
    restart: unless-stopped


  celery-beat:
    build:  # 复用 web 服务的构建配置
      context: ./backend
      dockerfile: Dockerfile.prod
    image: my_django:v5.0.6  # 保持镜像版本一致
    container_name: bt_nms_celery_beat0
    command: celery -A myproject beat --loglevel=info
    volumes:
      - ./backend:/app  # 动态挂载代码（与 web 服务路径一致）
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=myproject.settings
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - redis
      - db
    networks:
      - bt_nms_network
    restart: unless-stopped

  db:
    image: postgres:16.3
    container_name: bt_nms_postgres_db0
    environment:
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
    #ports:
      #- "5432:5432"
    volumes:
      - bt_nms_postgres_data:/var/lib/postgresql/data
    networks:
      - bt_nms_network
    restart: unless-stopped

  flower:
    image: mher/flower:latest
    container_name: bt_nms_flower0
    ports:
      - "5555:5555"  # 将 Flower 的端口暴露出来
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0  # 使用环境变量指定 Broker
    depends_on:
      - redis
      - celery
    networks:
      - bt_nms_network

networks:
  bt_nms_network:
    driver: bridge
  kafka_kafka-net:
    external: true

volumes:
  bt_nms_postgres_data:
