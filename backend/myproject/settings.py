"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from consts import *

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7*q-54ac9t=+c)2cs6w9#c^sm%!f$=r+y+r7z+si8%8)1y!-h7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#DEBUG = False #20241218 改成false之后后端admin界面显示不出css样式

AUTH_USER_MODEL = 'myapp.CustomUser' 

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '192.168.31.243',  # 你的局域网IP地址
    'bt_nms_django_app', # docker-compose中的服务名
    '*',  # 如果你想允许所有主机名访问（仅用于开发环境）
]

# Application definition

INSTALLED_APPS = [
    'django_admin_filters',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # 确保添加此项
    'channels',
    'myapp',
    'django_celery_beat',
    'django_celery_results',  # 添加 Celery 结果后端
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',  # 可选：仅在需要黑名单功能时添加
    'corsheaders',
    'import_export',
]

SITE_ID = 1  # 默认站点的ID

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',#20241218注释掉，因为前端使用JWT认证，不需要使用CSRF
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mydatabase',
        'USER': 'myuser',
        'PASSWORD': 'mypassword',
        'HOST': 'db',
        'PORT': '5432',
    }
}

# Django发送GET/POST请求的数量限制。一个单独的请求上传数据时，这个设置限制了该请求中允许的最大字段数量。超出这个数量的请求将被拒绝，并抛出 TooManyFieldsSent 异常。
DATA_UPLOAD_MAX_NUMBER_FIELDS = 50000  # 默认值是1000，根据你的需要调整这个值。通常，设置为 10000 到 50000 是一个相对合理的范围，但具体数值需要根据你的实际情况进行调整。如果你确实需要更高的值，请确保经过充分测试。


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 4,
        }
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'
#LANGUAGE_CODE = 'en'

TIME_ZONE = 'Asia/Shanghai' 
#TIME_ZONE = 'UTC'

USE_I18N = True
USE_L10N = True
USE_TZ = True

# 添加语言设置
LANGUAGES = [
    ('zh-hans', 'Simplified Chinese'),
    ('en', 'English'),
]

# 语言文件目录
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# 媒体文件配置
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760000  # 10000MB 上传文件的大小限制
FILE_UPLOAD_MAX_MEMORY_SIZE = 104857600 # 100MB 上传文件的最大内存限制，超过大小的文件将被存储在磁盘上而不是内存中

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'#所有新建模型的主键默认使用BigAutoField以防止记录数达到上限导致不能写入新记录

# Redis configuration
REDIS_HOST = 'redis'  # 或者你的Redis服务器地址
#REDIS_HOST = 'localhost'
REDIS_PORT = 6379  # Redis默认端
REDIS_DB = 1
REDIS_BROKER_DB = 0

# 配置 Channels
ASGI_APPLICATION = 'myproject.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
        },
    },
}

# 配置缓存
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}', # 根据你的 Redis 服务器地址和端口进行调整
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}


# 配置 Celery
CELERY_BROKER_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_BROKER_DB}'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_RESULT_BACKEND = f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_BROKER_DB}' #CELERY_RESULT_BACKEND = 'django-db'#使用 Django 作为 Celery 结果后端
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
#CELERY_TIMEZONE = 'UTC'
CELERY_TIMEZONE = 'Asia/Shanghai'
##CELERYD_POOL = 'gevent'

#配置Celery_Beat
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,  # Default page size, can be overridden by client
    'PAGE_SIZE_QUERY_PARAM': 'page_size',
    'MAX_PAGE_SIZE': 0,  # Optional: limit the maximum page size
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',#This will ensure that DRF only uses the JSON renderer and does not attempt to render HTML forms.
    ),
}


from datetime import timedelta

# JWT 设置
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=99999),#minutes=60
    'REFRESH_TOKEN_LIFETIME': timedelta(days=99999),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',
}

'''
CORS_ALLOWED_ORIGINS = [ # 确保只有授权的前端应用能够访问你的后端 API
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    'http://192.168.31.243:5173' #本机局域网IP地址
]'''
CORS_ALLOW_ALL_ORIGINS = True

'''
#已在MIDDLEWARE配置中注释掉CSRF中间件，因为前端使用JWT认证，不需要CSRF
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:38173",
    "http://127.0.0.1:38173",
    "http://192.168.31.243:38173", #替换为你的局域网IP地址
    "http://192.168.31.74:38173", #继续添加其它需要信任的域名
]
'''