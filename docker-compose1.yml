# 增加车间级微服务时，需要新建docker-compose文件（建议将文件名+1），将本文件内容复制过去，并在标记了 +1的位置加1（可参考docker-compose和docker-compose1）.
services:
  redis:
    image: redis:7.4.1
    command:
      - redis-server
      - --appendonly no
      - --databases 3
      - --maxmemory 100mb
      - --maxclients 500
      - --maxmemory-policy allkeys-lru
      - --save ""
      - --tcp-backlog 256
    networks:
      - bt_nms_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  vue:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: my_vue:dev
    environment:
      - VITE_BACKEND_PORT=8001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "38174:5173"
    command: >
      sh -c "npm install && npm run dev"
    networks:
      - bt_nms_network
    restart: unless-stopped

  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: my_django:v5.0.6
    command: ["/app/entrypoint.sh"]
    volumes:
      - ./backend:/app
    ports:
      - "8001:8000" # +1
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=myproject.settings
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_NAME=mydatabase
      - DATABASE_USER=myuser
      - DATABASE_PASSWORD=mypassword
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DJANGO_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_EMAIL=admin@example.com
      - DJANGO_SUPERUSER_PASSWORD=admin
    depends_on:
      - redis
      - db
    networks:
      - bt_nms_network
      - kafka_kafka-net
    restart: unless-stopped

  udp_receiver:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: my_django:v5.0.6
    command: python udp_receiver.py
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=myproject.settings
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_GROUP_ID=udp-receiver-1 # +1
    depends_on:
      - web
    volumes:
      - ./backend:/app
    networks:
      - bt_nms_network
      - kafka_kafka-net
    restart: unless-stopped

  summarize_alarms_container:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    image: my_django:v5.0.6
    command: python summarize_alarms_container.py
    volumes:
      - ./backend:/app
    working_dir: /app
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=myproject.settings
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - web
    networks:
      - bt_nms_network
    restart: unless-stopped

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: my_django:v5.0.6
    command: celery -A myproject worker --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=myproject.settings
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - redis
      - db
    networks:
      - bt_nms_network
    restart: unless-stopped


  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: my_django:v5.0.6
    command: celery -A myproject beat --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=myproject.settings
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - redis
      - db
    networks:
      - bt_nms_network
    restart: unless-stopped


  db:
    image: postgres:16.3
    environment:
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
    volumes:
      - bt_nms_postgres_data:/var/lib/postgresql/data
    networks:
      - bt_nms_network
    restart: unless-stopped

  flower:
    image: mher/flower:latest
    ports:
      - "5556:5555" # +1
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - redis
      - celery
    networks:
      - bt_nms_network

networks:
  bt_nms_network:
    driver: bridge
  kafka_kafka-net:
    external: true

volumes:
  bt_nms_postgres_data:
